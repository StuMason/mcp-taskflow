import { getApplications, getFeatures, getTasks, getSessions, getFileChanges, getCheckpoints, getSnapshots, getDecisions } from '../lib/data-utils';
import DashboardLayout from '../components/DashboardLayout';
import Link from 'next/link';

export default async function Home() {
  // Fetch all data for the dashboard
  const applications = await getApplications();
  const features = await getFeatures();
  const tasks = await getTasks();
  const sessions = await getSessions();
  const fileChanges = await getFileChanges();
  const checkpoints = await getCheckpoints();
  const snapshots = await getSnapshots();
  const decisions = await getDecisions();

  // Calculate statistics
  const totalApplications = applications.length;
  const totalFeatures = features.length;
  const totalTasks = tasks.length;
  const totalSessions = sessions.length;
  const totalFileChanges = fileChanges.length;
  
  // Active sessions
  const activeSessions = sessions.filter(session => session.status === 'active').length;
  
  // Tasks by status
  const tasksByStatus = {
    backlog: tasks.filter(task => task.status === 'backlog').length,
    ready: tasks.filter(task => task.status === 'ready').length,
    in_progress: tasks.filter(task => task.status === 'in_progress').length,
    review: tasks.filter(task => task.status === 'review').length,
    completed: tasks.filter(task => task.status === 'completed').length,
  };
  
  // Features by status
  const featuresByStatus = {
    planned: features.filter(feature => feature.status === 'planned').length,
    in_progress: features.filter(feature => feature.status === 'in_progress').length,
    completed: features.filter(feature => feature.status === 'completed').length,
    abandoned: features.filter(feature => feature.status === 'abandoned').length,
  };
  
  // File changes by type
  const fileChangesByType = {
    created: fileChanges.filter(change => change.change_type === 'created').length,
    modified: fileChanges.filter(change => change.change_type === 'modified').length,
    deleted: fileChanges.filter(change => change.change_type === 'deleted').length,
  };
  
  // Recent activity
  const recentSessions = sessions.slice(0, 5);
  const recentFileChanges = fileChanges.slice(0, 5);
  const recentCheckpoints = checkpoints.slice(0, 5);
  const recentDecisions = decisions.slice(0, 5);

  // Most active files
  const fileChangesByPath = fileChanges.reduce((acc, change) => {
    acc[change.file_path] = (acc[change.file_path] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  const mostActiveFiles = Object.entries(fileChangesByPath)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  return (
    <DashboardLayout 
      title="TaskFlow Dashboard" 
      description="Comprehensive overview of your development progress"
      darkMode={true}
    >
      {/* Top Stats Row */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Applications</p>
              <p className="text-3xl font-bold text-white">{totalApplications}</p>
            </div>
            <div className="p-3 bg-indigo-600 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.25 6.375c0 2.278-3.694 4.125-8.25 4.125S3.75 8.653 3.75 6.375m16.5 0c0-2.278-3.694-4.125-8.25-4.125S3.75 4.097 3.75 6.375m16.5 0v11.25c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125V6.375m16.5 0v3.75m-16.5-3.75v3.75m16.5 0v3.75C20.25 16.153 16.556 18 12 18s-8.25-1.847-8.25-4.125v-3.75m16.5 0c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125" />
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <Link href="/applications" className="text-xs text-indigo-400 hover:text-indigo-300">View all applications →</Link>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Features</p>
              <p className="text-3xl font-bold text-white">{totalFeatures}</p>
            </div>
            <div className="p-3 bg-purple-600 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.25 6.087c0-.355.186-.676.401-.959.221-.29.349-.634.349-1.003 0-1.036-1.007-1.875-2.25-1.875s-2.25.84-2.25 1.875c0 .369.128.713.349 1.003.215.283.401.604.401.959v0a.64.64 0 0 1-.657.643 48.39 48.39 0 0 1-4.163-.3c.186 1.613.293 3.25.315 4.907a.656.656 0 0 1-.658.663v0c-.355 0-.676-.186-.959-.401a1.647 1.647 0 0 0-1.003-.349c-1.036 0-1.875 1.007-1.875 2.25s.84 2.25 1.875 2.25c.369 0 .713-.128 1.003-.349.283-.215.604-.401.959-.401v0c.31 0 .555.26.532.57a48.039 48.039 0 0 1-.642 5.056c1.518.19 3.058.309 4.616.354a.64.64 0 0 0 .657-.643v0c0-.355-.186-.676-.401-.959a1.647 1.647 0 0 1-.349-1.003c0-1.035 1.008-1.875 2.25-1.875 1.243 0 2.25.84 2.25 1.875 0 .369-.128.713-.349 1.003-.215.283-.4.604-.4.959v0c0 .333.277.599.61.58a48.1 48.1 0 0 0 5.427-.63 48.05 48.05 0 0 0 .582-4.717.532.532 0 0 0-.533-.57v0c-.355 0-.676.186-.959.401-.29.221-.634.349-1.003.349-1.035 0-1.875-1.007-1.875-2.25s.84-2.25 1.875-2.25c.37 0 .713.128 1.003.349.283.215.604.401.96.401v0a.656.656 0 0 0 .658-.663 48.422 48.422 0 0 0-.37-5.36c-1.886.342-3.81.574-5.766.689a.578.578 0 0 1-.61-.58v0Z" />
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <Link href="/features" className="text-xs text-purple-400 hover:text-purple-300">View all features →</Link>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Tasks</p>
              <p className="text-3xl font-bold text-white">{totalTasks}</p>
            </div>
            <div className="p-3 bg-green-600 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <Link href="/tasks" className="text-xs text-green-400 hover:text-green-300">View all tasks →</Link>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Sessions</p>
              <p className="text-3xl font-bold text-white">{totalSessions}</p>
            </div>
            <div className="p-3 bg-blue-600 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <Link href="/sessions" className="text-xs text-blue-400 hover:text-blue-300">View all sessions →</Link>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">File Changes</p>
              <p className="text-3xl font-bold text-white">{totalFileChanges}</p>
            </div>
            <div className="p-3 bg-amber-600 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <Link href="/file-changes" className="text-xs text-amber-400 hover:text-amber-300">View all changes →</Link>
          </div>
        </div>
      </div>
      
      {/* Middle Row - Status Charts */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        {/* Task Status */}
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-4">Task Status</h2>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Backlog</span>
                <span className="text-sm text-gray-300">{tasksByStatus.backlog}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-gray-500 h-2 rounded-full" style={{ width: `${(tasksByStatus.backlog / totalTasks) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Ready</span>
                <span className="text-sm text-gray-300">{tasksByStatus.ready}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-blue-500 h-2 rounded-full" style={{ width: `${(tasksByStatus.ready / totalTasks) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">In Progress</span>
                <span className="text-sm text-gray-300">{tasksByStatus.in_progress}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-yellow-500 h-2 rounded-full" style={{ width: `${(tasksByStatus.in_progress / totalTasks) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Review</span>
                <span className="text-sm text-gray-300">{tasksByStatus.review}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-purple-500 h-2 rounded-full" style={{ width: `${(tasksByStatus.review / totalTasks) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Completed</span>
                <span className="text-sm text-gray-300">{tasksByStatus.completed}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: `${(tasksByStatus.completed / totalTasks) * 100}%` }}></div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Feature Status */}
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-4">Feature Status</h2>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Planned</span>
                <span className="text-sm text-gray-300">{featuresByStatus.planned}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-blue-500 h-2 rounded-full" style={{ width: `${(featuresByStatus.planned / totalFeatures) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">In Progress</span>
                <span className="text-sm text-gray-300">{featuresByStatus.in_progress}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-yellow-500 h-2 rounded-full" style={{ width: `${(featuresByStatus.in_progress / totalFeatures) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Completed</span>
                <span className="text-sm text-gray-300">{featuresByStatus.completed}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: `${(featuresByStatus.completed / totalFeatures) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Abandoned</span>
                <span className="text-sm text-gray-300">{featuresByStatus.abandoned}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-red-500 h-2 rounded-full" style={{ width: `${(featuresByStatus.abandoned / totalFeatures) * 100}%` }}></div>
              </div>
            </div>
          </div>
        </div>
        
        {/* File Changes */}
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-4">File Changes</h2>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Created</span>
                <span className="text-sm text-gray-300">{fileChangesByType.created}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: `${(fileChangesByType.created / totalFileChanges) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Modified</span>
                <span className="text-sm text-gray-300">{fileChangesByType.modified}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-blue-500 h-2 rounded-full" style={{ width: `${(fileChangesByType.modified / totalFileChanges) * 100}%` }}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-300">Deleted</span>
                <span className="text-sm text-gray-300">{fileChangesByType.deleted}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className="bg-red-500 h-2 rounded-full" style={{ width: `${(fileChangesByType.deleted / totalFileChanges) * 100}%` }}></div>
              </div>
            </div>
          </div>
          
          <div className="mt-6">
            <h3 className="text-lg font-semibold text-white mb-3">Most Active Files</h3>
            <ul className="space-y-2">
              {mostActiveFiles.map(([filePath, count]) => (
                <li key={filePath} className="flex justify-between items-center">
                  <span className="text-sm text-gray-300 truncate max-w-[70%]">{filePath}</span>
                  <span className="text-xs px-2 py-1 bg-gray-700 rounded-full text-gray-300">{count} changes</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
      
      {/* Bottom Row - Recent Activity */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Recent Sessions */}
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-white">Recent Sessions</h2>
            <span className="text-xs px-2 py-1 bg-blue-600 rounded-full text-white">{activeSessions} Active</span>
          </div>
          
          {recentSessions.length === 0 ? (
            <p className="text-gray-400">No sessions found</p>
          ) : (
            <div className="space-y-4">
              {recentSessions.map((session) => {
                const task = tasks.find(t => t.id === session.task_id);
                return (
                  <div key={session.id} className="bg-gray-700 rounded-lg p-4">
                    <div className="flex justify-between">
                      <div>
                        <p className="text-white font-medium">Session {session.id}</p>
                        <p className="text-sm text-gray-300">{task?.name || 'No task'}</p>
                      </div>
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        session.status === 'active' ? 'bg-blue-600 text-white' : 
                        session.status === 'completed' ? 'bg-green-600 text-white' : 
                        'bg-red-600 text-white'
                      }`}>
                        {session.status}
                      </span>
                    </div>
                    <div className="mt-2 text-xs text-gray-400">
                      <p>Started: {new Date(session.start_time).toLocaleString()}</p>
                      {session.end_time && (
                        <p>Ended: {new Date(session.end_time).toLocaleString()}</p>
                      )}
                    </div>
                    <div className="mt-2">
                      <Link 
                        href={`/file-changes?sessionId=${session.id}`}
                        className="text-xs text-blue-400 hover:text-blue-300 mr-3"
                      >
                        View Changes
                      </Link>
                      <Link 
                        href={`/checkpoints?sessionId=${session.id}`}
                        className="text-xs text-blue-400 hover:text-blue-300"
                      >
                        View Checkpoints
                      </Link>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
        
        {/* Recent Decisions */}
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-4">Recent Decisions</h2>
          
          {recentDecisions.length === 0 ? (
            <p className="text-gray-400">No decisions found</p>
          ) : (
            <div className="space-y-4">
              {recentDecisions.map((decision) => {
                const session = sessions.find(s => s.id === decision.session_id);
                return (
                  <div key={decision.id} className="bg-gray-700 rounded-lg p-4">
                    <p className="text-white font-medium">{decision.description}</p>
                    <p className="text-sm text-gray-300 mt-1 line-clamp-2">{decision.reasoning}</p>
                    <div className="mt-2 text-xs text-gray-400">
                      <p>Session: {session?.id || 'Unknown'}</p>
                      <p>Made: {new Date(decision.timestamp).toLocaleString()}</p>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
      
      {/* Applications Table */}
      <div className="mt-6 bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
        <h2 className="text-xl font-semibold text-white mb-4">Applications</h2>
        
        {applications.length === 0 ? (
          <p className="text-gray-400">No applications found. Please create one using the TaskFlow tools.</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead>
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Name
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Description
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Features
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Tasks
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Created
                  </th>
                </tr>
              </thead>
              <tbody className="bg-gray-800 divide-y divide-gray-700">
                {applications.map((app) => {
                  const appFeatures = features.filter(f => f.application_id === app.id);
                  const appFeatureIds = appFeatures.map(f => f.id);
                  const appTasks = tasks.filter(t => appFeatureIds.includes(t.feature_id));
                  
                  return (
                    <tr key={app.id} className="hover:bg-gray-700">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-white">{app.name}</div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-300">{app.description || 'No description'}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-300">{appFeatures.length}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-300">{appTasks.length}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-300">{new Date(app.created_at).toLocaleString()}</div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}
